@page "/configdetail/{ConfigurationID}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@Config" OnValidSubmit="SaveDevice">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Configuration detail</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudItem xs="6" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Configuration ID : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudText Typo="Typo.h6">@Config.ConfigurationID</MudText>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Type : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudSelect T="string" Value="@Config.Conditions" Variant="Variant.Outlined" Dense="true" Class="custom-disabled" ReadOnly="true">
                                            <MudSelectItem Value="@("LoRa Device")" />
                                            <MudSelectItem Value="@("Other")" />
                                        </MudSelect>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                            </MudItem>
                            <MudItem md="6" xs="12">
                            </MudItem>
                            <MudItem md="6" xs="12">
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudFab ButtonType="ButtonType.Submit" Color="Color.Secondary" Icon="@Icons.Material.Filled.Save" Label="Save" Disabled="@(!success)" Class="ml-auto" />
                    <MudFab Color="Color.Dark" Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="DeleteDevice" />
                </MudCardActions>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

@*<MudText>@Config.Modules.First().ModuleName</MudText>*@

@code {

    [Parameter]
    public string ConfigurationID { get; set; }

    private ConfigListItem Config { get; set; } = new ConfigListItem();

    private bool success = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Config = await Http.GetFromJsonAsync<ConfigListItem>($"Configs/{ConfigurationID}");
            Console.WriteLine(Config.Modules.Count().ToString());
            Console.WriteLine(Config.Modules.First().ModuleName);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async void SaveDevice()
    {
        await Task.Delay(0);
    }

    private async Task DeleteDevice()
    {
        await Task.Delay(0);
    }
}

