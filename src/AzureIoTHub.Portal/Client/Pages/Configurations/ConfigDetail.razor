@page "/configdetail/{ConfigurationID}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Text.RegularExpressions;
@using System.Collections.Generic;
@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@Config" OnValidSubmit="SaveDevice">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Configuration detail</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudItem xs="6" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Configuration ID : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudText Typo="Typo.h6">@Config.ConfigurationID</MudText>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Owner : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@ConditionOwner" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Environment : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@ConditionEnv" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Type : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@ConditionType" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudFab ButtonType="ButtonType.Submit" Color="Color.Secondary" Icon="@Icons.Material.Filled.Save" Label="Save" Disabled="@(!success)" Class="ml-auto" />
                    <MudFab Color="Color.Dark" Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="DeleteDevice" />
                </MudCardActions>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudTable Items="@Config.Modules" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                <ColGroup>
                    <col style="width: 40%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 20%;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Style="text-align: center">Module Name</MudTh>
                    <MudTh Style="text-align: center">Version</MudTh>
                    <MudTh Style="text-align: center">Status</MudTh>
                    <MudTh Style="text-align: center"></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                    <MudTd DataLabel="Version" Style="text-align: center">@context.Version</MudTd>
                    <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                    <MudTd DataLabel="Device" Style="text-align: center">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(async () => await ShowModuleDetail(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string ConfigurationID { get; set; }

    private ConfigListItem Config { get; set; } = new ConfigListItem();

    private bool success = true;

    public string ConditionEnv { get; set; }
    public string ConditionType { get; set; }
    public string ConditionOwner { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Config = await Http.GetFromJsonAsync<ConfigListItem>($"Configs/{ConfigurationID}");
            ConditionOwner = RetrieveCondition("owner");
            ConditionEnv = RetrieveCondition("env");
            ConditionType = RetrieveCondition("type");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private string RetrieveCondition(string field)
    {
        string regex = @"tags\." + field + @"\s?=\s?'(?<field>\S*)'";
        if (Regex.IsMatch(Config.Conditions, regex))
        {
            return Regex.Matches(Config.Conditions, regex).First().Groups[1].Value;
        }
        else
        {
            return "no_match";
        }
    }

    public async void SaveDevice()
    {
        await Task.Delay(0);
    }

    private async Task DeleteDevice()
    {
        await Task.Delay(0);
    }

    public async Task ShowModuleDetail(GatewayModule module)
    {
        var parameters = new DialogParameters();
        parameters.Add("module", module);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };
        var result = await DialogService.Show<ModuleDetail>(module.ModuleName, parameters, options).Result;

        if (result.Cancelled)
        {
            return;
        }
    }
}

