@page "/configurations"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                <ColGroup>
                    <col style="width: 20%;" />
                    <col style="width: 20%;" />
                    <col style="width: 12%;" />
                    <col style="width: 18%;" />
                    <col style="width: 4%;" />
                    <col style="width: 18%;" />
                    <col style="width: 4%;" />
                    <col style="width: 4%;" />
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Configurations</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadConfigurations" Class="ma-2"></MudIconButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh Style="text-align: center">Conditions</MudTh>
                    <MudTh Style="text-align: center">System Metrics</MudTh>
                    <MudTh Style="text-align: center">Device Metrics</MudTh>
                    <MudTh Style="text-align: center">Priority</MudTh>
                    <MudTh Style="text-align: center">Creation date</MudTh>
                    <MudTh Style="text-align: center">Detail</MudTh>
                    <MudTh Style="text-align: center">Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID" Style="word-break: break-all;">
                        <a href="#">@context.ConfigurationID</a>
                    </MudTd>
                    <MudTd DataLabel="Conditions" Style="word-break: break-all; ">
                        <a href="#">@context.Conditions</a>
                    </MudTd>
                    <MudTd DataLabel="System Metrics" Style="text-align: center;">
                        @context.MetricsTargeted targeted<br />
                        @context.MetricsApplied applied <br />
                    </MudTd>
                    <MudTd DataLabel="Device Metrics" Style="text-align: center;">
                        @context.MetricsSuccess reporting success <br />
                        @context.MetricsFailure reporting failure <br />
                    </MudTd>
                    <MudTd DataLabel="Priority" Style="text-align: center">@context.Priority</MudTd>
                    <MudTd DataLabel="Creation date" Style="text-align: center;">@context.CreationDate</MudTd>
                    <MudTd DataLabel="Details" Style="text-align: center">
                        <a href="configdetail/@context.ConfigurationID"><MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" /></a>
                    </MudTd>
                    <MudTd DataLabel="Delete" Style="text-align: center">
                        <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteConfiguration(context))"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private ConfigListItem[] result;
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurations();
    }

    private async Task LoadConfigurations()
    {
        try
        {
            result = await Http.GetFromJsonAsync<ConfigListItem[]>("configs");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteConfiguration(ConfigListItem config)
    {
        await Task.Delay(10); //TODO
    }
}