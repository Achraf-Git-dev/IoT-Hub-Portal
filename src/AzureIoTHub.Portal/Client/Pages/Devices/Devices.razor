@page "/devices"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared
@attribute [Authorize]
@inject HttpClient Http


<MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true Filter="new Func<DeviceListItem,bool>(FilterFunc1)">
    <ColGroup>
        <col style="width: 50%; text-align: left" />
        <col style="width: 10%; text-align: center" />
        <col style="width: 10%; text-align: center" />
        <col style="width: 20%; text-align: center" />
        <col style="width: 10%; text-align: center" />
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Device</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Connection state</MudTh>
        <MudTh>Last activity time</MudTh>
        <MudTh>See details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Device" Style="overflow-wrap: break-word;">@context.DeviceID</MudTd>
        <MudTd DataLabel="Status" Style="text-align: center"><MudSwitch @bind-Checked="@context.IsEnabled" Color="Color.Info" ReadOnly=true /></MudTd>
        <MudTd DataLabel="Connection" Style="text-align: center">@context.IsConnected</MudTd>
        <MudTd DataLabel="LAT" Style="text-align: center">@context.LastActivityDate</MudTd>
        <MudTd DataLabel="Details" Style="text-align: center">...</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
    </PagerContent>
</MudTable>

@code {
    private DeviceListItem[] result;
    private string searchString1 = "";
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            result = await Http.GetFromJsonAsync<DeviceListItem[]>("Devices");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool FilterFunc1(DeviceListItem item) => FilterFunc(item, searchString1);

    private bool FilterFunc(DeviceListItem item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.DeviceID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.DeviceID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}

@*<div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary">
                        <h2 class="card-title ">Devices</h2>
                        <p class="card-category">This shows the IoT Hub Devices availiable</p>
                    </div>
                    <div class="card-body">
                        @if (result == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped align-middle text-center">
                                    <colgroup>
                                        <col class="col-md-7">
                                        <col class="col-md-1">
                                        <col class="col-md-1">
                                        <col class="col-md-2">
                                        <col class="col-md-1">
                                    </colgroup>
                                    <thead class="text-primary">
                                        <tr>
                                            <th align="left">Device ID</th>
                                            <th>Status</th>
                                            <th>Connection State</th>
                                            <th>Last Activity Time</th>
                                            <th>See details</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in result)
                                        {
                                            <tr>
                                                <td class="text-break" align="left">@item.DeviceID</td>
                                                <td>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" checked=@(item.IsEnabled) disabled>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="material-icons @(item.IsConnected ? "text-success" : "text-dark")">
                                                        <i class=@(item.IsConnected ? "bi-wifi" : "bi-wifi-off")></i>
                                                    </span>
                                                </td>
                                                <td>@item.LastActivityDate</td>
                                                <td>
                                                    <a href="@($" devicedetail /{ item.DeviceID} ")" class="btn btn-primary table-btn btn-sm"> <i class="bi-search"></i></a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>*@

@*@code {
        private DeviceListItem[] result;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                result = await Http.GetFromJsonAsync<DeviceListItem[]>("Devices");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }*@
