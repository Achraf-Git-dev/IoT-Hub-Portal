@page "/devices"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared
@attribute [Authorize]
@inject HttpClient Http

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Search panel</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>

        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudDivider />

        <MudRadioGroup @bind-SelectedOption="@searchStatus1">
            <MudText>Status : </MudText>
            <MudRadio Option="@("true")" Color="Color.Primary">Enabled</MudRadio>
            <MudRadio Option="@("false")" Color="Color.Primary">Disabled</MudRadio>
            <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
        </MudRadioGroup>
        <MudDivider />
        <MudText>Connection state : </MudText>
        <MudRadioGroup @bind-SelectedOption="@searchState1">
            <MudRadio Option="@("true")" Color="Color.Primary">Connected</MudRadio>
            <MudRadio Option="@("false")" Color="Color.Primary">Disconnected</MudRadio>
            <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
        </MudRadioGroup>
        <MudDivider />
        
        <MudGrid>
            <MudItem xs="2">
                <MudText>Location : </MudText>
            </MudItem>
            <MudItem xs="2">
                <MudSelect T="string" Label="Domain">
                    <MudSelectItem Value="@("D1")" />
                    <MudSelectItem Value="@("D2")" />
                    <MudSelectItem Value="@("D3")" />
                    <MudSelectItem Value="@("D4")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudSelect T="string" Label="Zone">
                    <MudSelectItem Value="@("Z1")" />
                    <MudSelectItem Value="@("Z2")" />
                    <MudSelectItem Value="@("Z3")" />
                    <MudSelectItem Value="@("Z4")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudSelect T="string" Label="...">
                    <MudSelectItem Value="@("W1")" />
                    <MudSelectItem Value="@("W2")" />
                    <MudSelectItem Value="@("W3")" />
                    <MudSelectItem Value="@("W4")" />
                </MudSelect>
            </MudItem>
        </MudGrid>

    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Reset">Reset</MudButton>
    </MudCardActions>
</MudCard>

<MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true Filter="new Func<DeviceListItem, bool>(FilterFunc1)">

    <ColGroup>
        <col style="width: 50%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 20%;" />
        <col style="width: 10%;" />
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Device</MudTh>
        <MudTh Style="text-align: center">Status</MudTh>
        <MudTh Style="text-align: center">Connection state</MudTh>
        <MudTh Style="text-align: center">Last activity time</MudTh>
        <MudTh Style="text-align: center">See details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Device" Style="word-break: break-all;">@context.DeviceID</MudTd>
        <MudTd DataLabel="Status" Style="text-align: center"><MudSwitch Class="mx-0" @bind-Checked="@context.IsEnabled" Color="Color.Info" ReadOnly=true /></MudTd>
        <MudTd DataLabel="Connection" Style="text-align: center">@context.IsConnected</MudTd>
        <MudTd DataLabel="LAT" Style="text-align: center">@context.LastActivityDate</MudTd>
        <MudTd DataLabel="Details" Style="text-align: center">@context.AppEUI @context.AppKey @context.LocationCode</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
    </PagerContent>
</MudTable>

@code {
    private DeviceListItem[] result;
    private string searchString1 = "";
    private string searchStatus1 = "";
    private string searchState1 = "";
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            result = await Http.GetFromJsonAsync<DeviceListItem[]>("Devices");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void Reset()
    {
        searchString1 = "";
        searchStatus1 = "";
        searchState1 = "";
    }

    private bool FilterFunc1(DeviceListItem item) => FilterFunc(item, searchString1, searchStatus1, searchState1);

    private bool FilterFunc(DeviceListItem item, string searchString, string searchStatus, string searchState)
    {
        bool flagName = string.IsNullOrWhiteSpace(searchString) || item.DeviceID.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        bool flagStatus = string.IsNullOrWhiteSpace(searchStatus) || item.IsEnabled.ToString().Contains(searchStatus, StringComparison.OrdinalIgnoreCase);
        bool flagState = string.IsNullOrWhiteSpace(searchState) || item.IsConnected.ToString().Contains(searchState, StringComparison.OrdinalIgnoreCase);

        if (flagName && flagStatus && flagState)
            return true;
        return false;
    }
}
