@page "/gateways/details/{deviceId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (loading)
{
    <MudItem Class="custom-centered-container">
        <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
    </MudItem>
}
else
{
    <div class="detail-gateway">
        <MudContainer MaxWidth="MaxWidth.False">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">Gateway detail</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Class="grid-custom">

                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="3" sm="7">
                                            <MudText>Device ID : </MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="4" sm="10">
                                            <MudText Typo="Typo.h6">@gateway.DeviceId</MudText>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="3" sm="7">
                                            <MudText>Type :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="4" sm="10">
                                            <MudTextField @bind-Value="@gateway.Type" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="3" sm="7">
                                            <MudText>Environement :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" sm="10" md="4">
                                            <MudTextField @bind-Value="@gateway.Environement" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>

                                            <MudSelect T="string" Label="env" Variant="Variant.Outlined">
                                                <MudSelectItem Value="@("Dev")">Dévelopement</MudSelectItem>
                                                <MudSelectItem Value="@("Prod")">Production</MudSelectItem>
                                                <MudSelectItem Value="@("Indus")">Industrie</MudSelectItem>
                                            </MudSelect>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="3" sm="7">
                                            <MudText>Status :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" sm="10" md="4">
                                            <MudRadioGroup @bind-SelectedOption="@gateway.Status" Style="display:flex">
                                                <MudRadio Option="@("Enabled")" Color="Color.Primary">Enabled</MudRadio>
                                                <MudRadio Option="@("Disabled")" Color="Color.Primary">Disabled</MudRadio>
                                            </MudRadioGroup>
                                        </MudItem>
                                    </MudItem>
                                    <MudButton Disabled="@processing" Class="btn" OnClick="UpdateDevice" Variant="Variant.Filled" Color="Color.Dark">
                                        @if (processing)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                            <MudText Class="ms-2">Processing</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Save Settings</MudText>
                                        }
                                    </MudButton>
                                </MudItem>

                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="4" sm="7">
                                            <MudText>Runtime response :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="4" sm="10">
                                            @if (gateway.RuntimeResponse == "running")
                                            {
                                                <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />
                                            }
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="4" sm="7">
                                            <MudText>Nombre de device :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="4" sm="10">
                                            <MudTextField @bind-Value="@gateway.NbDevices" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem xs="12" md="4" sm="7">
                                            <MudText>Nombre de module :</MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="4" sm="10">
                                            <MudTextField @bind-Value="@gateway.NbModule" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>

                                    <MudItem xs="12" md="6" sm="12" Class="last-deployment">
                                        <MudItem xs="12" Class="custom-form">
                                            <MudItem xs="12" md="4" sm="6">
                                                <MudText>Name :</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="10">
                                                <MudText>@gateway.LastDeployment.Name</MudText>
                                            </MudItem>
                                        </MudItem>
                                        <MudItem xs="12" Class="custom-form">
                                            <MudItem xs="12" md="4" sm="7">
                                                <MudText>Date :</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="10">
                                                <MudText>@gateway.LastDeployment.DateCreation</MudText>
                                            </MudItem>
                                        </MudItem>
                                        <MudItem xs="12" Class="custom-form">
                                            <MudItem xs="12" md="4" sm="7">
                                                <MudText>Status :</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="10">
                                                <MudText>@gateway.LastDeployment.Status</MudText>
                                            </MudItem>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>

                                <MudItem md="4" xs="12">
                                    <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" OnClick="ShowConnectionString">Show Connection String</MudButton>
                                    <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" OnClick="DeleteDeviceAsync">Delete Gateway</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12">
                    <MudTable Items="@gateway.Modules" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                        <ColGroup>
                            <col style="width: 40%;" />
                            <col style="width: 10%;" />
                            <col style="width: 10%;" />
                            <col style="width: 20%;" />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh Style="text-align: center">Module Name</MudTh>
                            <MudTh Style="text-align: center">Version</MudTh>
                            <MudTh Style="text-align: center">Status</MudTh>
                            <MudTh Style="text-align: center"></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                            <MudTd DataLabel="Version" Style="text-align: center">@context.Version</MudTd>
                            <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                            <MudTd DataLabel="Device" Style="text-align: center">
                                <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" Disabled="btn_disable" OnClick="@(async () => await OnMethod(context,"GetModuleLogs") )">logs</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="btn_disable" OnClick="@(async () => await OnMethod(context,"RestartModule") )">reboot</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </div>
}


@code {
    [Parameter]
    public string deviceId { get; set; }
    private bool loading = true;
    private bool btn_disable = false;
    private bool processing = false;

    private Gateway gateway;

    protected override async Task OnInitializedAsync()
    {
        gateway = new Gateway();
        await LoadDevice();
    }

    public async Task LoadDevice()
    {
        gateway = await Http.GetFromJsonAsync<Gateway>($"Gateways/{deviceId}");
        if (gateway.Connection_state == "Disconnected")
        {
            btn_disable = true;
        }
        loading = false;
    }

    public async Task UpdateDevice()
    {
        processing = true;
        var result = await Http.PutAsJsonAsync($"Gateways/{gateway.DeviceId}", gateway);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"Device {gateway.DeviceId} has been successfully updated!", Severity.Success);
            processing = false;
        }
    }

    public async Task OnMethod(GatewayModule module, string methodName)
    {
        var result = await Http.PostAsJsonAsync($"Gateways/{gateway.DeviceId}/{module.ModuleName}/{methodName}",module);

        var test = result.Content.ReadFromJsonAsync<C2Dresult>().Result;

        if (test.Status == 200)
        {
            Snackbar.Add("Command successfully execute.", Severity.Success);
            if (methodName == "GetModuleLogs")
            {
                var parameter = new DialogParameters();
                parameter.Add("info", test);

                _ = await DialogService.Show<Logs>(" Logs gateway", parameter).Result;
            }
        }
        else
        {
            Snackbar.Add($"Error<br>Status : {test.Status};<br>Payload : {test.Payload};", Severity.Error,
                (option) =>
                {
                    option.VisibleStateDuration = 100000;
                });
        }
    }

    public async Task ShowConnectionString()
    {
        var parameter = new DialogParameters();
        parameter.Add(nameof(Gateway.DeviceId), gateway.DeviceId);
        parameter.Add(nameof(Gateway.EndPoint), gateway.EndPoint);
        parameter.Add(nameof(Gateway.SymmetricKey), gateway.SymmetricKey);

        var result = await DialogService.Show<ConnectionString>("ConnectionString gateway ", parameter).Result;
    }

    public async Task DeleteDeviceAsync()
    {
        var result = await Http.DeleteAsync($"Gateways/{gateway.DeviceId}");

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"Device {gateway.DeviceId} has been successfully delete!", Severity.Success);
            NavigationManager.NavigateTo("/gateways");

        }
    }
}
