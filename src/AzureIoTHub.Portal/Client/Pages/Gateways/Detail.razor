@page "/gateways/details/{deviceId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<div class="detail-gateway">
    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid Style="justify-content:center;">
            <div xs="12" class="card-detail">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Device detail</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <div class="content-box">
                                <div class="contentCardItem">
                                    <div class="form-group">
                                        <span>Name : @gateway.DeviceId </span>
                                    </div>
                                    <div class="form-group">
                                        <span>Type : @gateway.Type </span>
                                    </div>
                                    <div class="form-group">
                                        <span>
                                            Environement :
                                            <MudSelect T="string">
                                                <MudSelectItem Value="@("Dev")">Dev</MudSelectItem>
                                                <MudSelectItem Value="@("Prod")">Prod</MudSelectItem>
                                                <MudSelectItem Value="@("Indus")">Indus</MudSelectItem>
                                            </MudSelect>
                                        </span>
                                    </div>
                                    <div class="form-group">
                                        <label>Status : </label>
                                        <span>
                                            <MudRadioGroup @bind-SelectedOption="@gateway.Status">
                                                <MudRadio Option="@("Enabled")" Color="Color.Primary">Enabled</MudRadio>
                                                <MudRadio Option="@("Disabled")" Color="Color.Primary">Disabled</MudRadio>
                                            </MudRadioGroup>
                                        </span>
                                    </div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="UpdateDevice">Save Settings</MudButton>
                                </div>

                                <div class="contentCardItem">

                                    <div class="content-part2">
                                        <div class="content-item">
                                            <div>
                                                <div class="form-group">
                                                    <span>Runtime response : @gateway.RuntimeResponse</span>
                                                </div>

                                                <div class="form-group">
                                                    <span>Nombre de device : @gateway.NbDevices</span>
                                                </div>

                                                <div class="form-group">
                                                    <span>Nombre de module : @gateway.NbModule</span>
                                                </div>
                                            </div>
                                            <div class="content-button">
                                                <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" OnClick="ShowConnectionString">Show Connection String</MudButton>
                                                <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" OnClick="DeleteDeviceAsync">Delete Gateway</MudButton>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="last-deployment">
                                        <div class="form-group">
                                            <span>Name : @gateway.LastDeployment.Name</span>
                                        </div>

                                        <div class="form-group">
                                            <span>Date : @gateway.LastDeployment.DateCreation</span>
                                        </div>

                                        <div class="form-group">
                                            <span>Status : @gateway.LastDeployment.Status</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </div>
        </MudGrid>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.False" Class="module-table">
        <MudGrid>
            <MudItem xs="12">
                <MudTable Items="@gateway.Modules" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                    <ColGroup>
                        <col style="width: 40%;" />
                        <col style="width: 10%;" />
                        <col style="width: 10%;" />
                        <col style="width: 20%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh Style="text-align: center">Module Name</MudTh>
                        <MudTh Style="text-align: center">Version</MudTh>
                        <MudTh Style="text-align: center">Status</MudTh>
                        <MudTh Style="text-align: center"></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                        <MudTd DataLabel="Version" Style="text-align: center">@context.Version</MudTd>
                        <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                        <MudTd DataLabel="Device" Style="text-align: center">
                            <MudButton Variant="Variant.Filled" Color="Color.Dark">logs</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OnReboot(context.ModuleName) )">reboot</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudContainer>
</div>


@code {
    [Parameter]
    public string deviceId { get; set; }

    private Gateway gateway;

    protected override async Task OnInitializedAsync()
    {
        gateway = new Gateway();
        await LoadDevice();
    }

    public async Task LoadDevice()
    {
        gateway = await Http.GetFromJsonAsync<Gateway>($"Gateways/{deviceId}");
    }

    public async Task UpdateDevice()
    {
        var result = await Http.PutAsJsonAsync($"Gateways/{gateway.DeviceId}", gateway);
    }

    public async Task OnReboot(string moduleId)
    {
        var result = await Http.GetFromJsonAsync<string>($"Gateways/{gateway.DeviceId}/{moduleId}");
    }

    public async Task ShowConnectionString()
    {
        var parameter = new DialogParameters();
        parameter.Add(nameof(Gateway.EndPoint), gateway.EndPoint);
        parameter.Add("Scope", gateway.Scope);
        parameter.Add("SymmetricKey", gateway.SymmetricKey);

        var result = await DialogService.Show<ConnectionString>("ConnectionString gateway ", parameter).Result;

    }

    public async Task DeleteDeviceAsync()
    {
        var result = await Http.DeleteAsync($"Gateways/{gateway.DeviceId}");

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"Device {gateway.DeviceId} has been successfully delete!", Severity.Success);
            NavigationManager.NavigateTo("/gateways");

        }
    }
}
