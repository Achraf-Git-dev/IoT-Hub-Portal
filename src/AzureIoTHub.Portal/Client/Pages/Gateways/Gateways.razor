@page "/gateways"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json
@using Blazored.Modal
@using Blazored.Modal.Services

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService modal
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid>
            <div class="search-panel">
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Search panel</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ResetFiltre">Reset</MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <div class="form-group">
                                    <MudText>Name : </MudText>
                                    <MudTextField @bind-Value="model.DeviceId" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                </div>

                                <div class="form-group">
                                    <MudText>Type : </MudText>
                                    <MudSelect T="string" Label="Type" @bind-Value="model.Type" Variant="Variant.Outlined" Format="F2">
                                        <MudSelectItem Value="@("")" />
                                        @foreach (var item in listeType)
                                        {
                                            <MudSelectItem Value="@item" />
                                        }
                                    </MudSelect>
                                </div>
                                @*</MudItem>*@
                                @*<MudItem xs="6">*@
                                <div class="form-group">
                                    <MudRadioGroup @bind-SelectedOption="@model.Status">
                                        <MudText>Status : </MudText>
                                        <MudRadio Option="@("Enabled")" Color="Color.Primary">Enabled</MudRadio>
                                        <MudRadio Option="@("Disabled")" Color="Color.Primary">Disabled</MudRadio>
                                        <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
                                    </MudRadioGroup>
                                </div>
                                @*</MudItem>*@
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </div>

            <MudItem xs="12">
                <MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true Filter="new Func<GatewayListItem, bool>(FilterFunc)">
                    <ColGroup>
                        <col style="width: 50%;" />
                        <col style="width: 10%;" />
                        <col style="width: 20%;" />
                        <col style="width: 10%;" />
                        <col style="width: 10%;" />
                    </ColGroup>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Devices</MudText>
                        <MudSpacer />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh Style="text-align: center">Status</MudTh>
                        <MudTh Style="text-align: center">Type</MudTh>
                        <MudTh Style="text-align: center">Nb Device</MudTh>
                        <MudTh Style="text-align: center">See details</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Device" Style="word-break: break-all;">
                            <a href="/gateways/details/@context.DeviceId">@context.DeviceId</a>
                        </MudTd>

                        <MudTd DataLabel="Status" Style="text-align: center">
                            @if (context.Status == "Enabled")
                                {
                                <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" /> }
                                else
                                {
                                <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />}
                        </MudTd>
                        <MudTd DataLabel="Type" Style="text-align: center">@context.Type</MudTd>
                        <MudTd DataLabel="NbDevices" Style="text-align: center">@context.NbDevices</MudTd>
                        <MudTd DataLabel="Details" Style="text-align: center">
                            <a href="/gateways/details/@context.DeviceId"><MudIcon Icon="@Icons.Filled.Visibility" Color="Color.Default" /></a>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                    </PagerContent>
                </MudTable>
            </MudItem>
            <MudButton Variant="Variant.Filled" OnClick="ShowAddDialog" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
        </MudGrid>
    </MudContainer>
}



@code {
    private List<GatewayListItem> result;
    private List<string> listeType = new List<string>() { "lora", "unknow" };
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    private SearchModel model = new SearchModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadGatewaysList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadGatewaysList()
    {
        result = await Http.GetFromJsonAsync<List<GatewayListItem>>("Gateways");
    }

    private bool FilterFunc(GatewayListItem element)
    {
        if (
            (string.IsNullOrWhiteSpace(this.model.DeviceId) || element.DeviceId.Contains(model.DeviceId, StringComparison.OrdinalIgnoreCase))
            && (string.IsNullOrWhiteSpace(this.model.Type) || element.Type.Contains(model.Type, StringComparison.OrdinalIgnoreCase))
            && (string.IsNullOrWhiteSpace(this.model.Status) || element.Status.Contains(model.Status, StringComparison.OrdinalIgnoreCase))
            )
        {
            return true;
        }

        return false;
    }

    private void ResetFiltre()
    {
        this.model = new SearchModel();
    }

    private void RedirectToDetail(string id)
    {
        NavigationManager.NavigateTo($"/gateways/details/{id}");
    }

    private async Task ShowAddDialog()
    {
        var result = await modal.Show<Add>("Add gateways").Result;

        if (!result.Cancelled)
        {
            //var notification = new
            //{
            //    type = "success",
            //    title = "Gateways Add new",
            //    message = $"Successfully create the device"
            //};

            // await JS.InvokeVoidAsync("$.notify", notification);
            Snackbar.Add($"Device has been successfully created!", Severity.Success);

            await LoadGatewaysList();
        }
    }
}
