@page "/gateways"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="">
        @if (result == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="search-panel">
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Search panel</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ResetFiltre">Reset</MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                @*<MudItem xs="12">*@
                                <div class="form-group">
                                    <MudText>Name : </MudText>
                                    <MudTextField @bind-Value="model.DeviceId" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                </div>
                                @*</MudItem>*@
                                @*<MudItem xs="12" sm="6" md="4">*@
                                <div class="form-group">
                                    <MudText>Type : </MudText>
                                    <MudSelect T="string" Label="Type" @bind-Value="model.Type" Variant="Variant.Outlined" Format="F2">
                                        <MudSelectItem Value="@("")" />
                                        @foreach (var item in listeType)
                                        {
                                            <MudSelectItem Value="@item" />
                                        }
                                    </MudSelect>
                                </div>
                                @*</MudItem>*@
                                @*<MudItem xs="6">*@
                                <div class="form-group">
                                    <MudRadioGroup @bind-SelectedOption="@model.Status">
                                        <MudText>Status : </MudText>
                                        <MudRadio Option="@("Enabled")" Color="Color.Primary">Enabled</MudRadio>
                                        <MudRadio Option="@("Disabled")" Color="Color.Primary">Disabled</MudRadio>
                                        <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
                                    </MudRadioGroup>
                                </div>
                                @*</MudItem>*@
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </div>


            <MudTable Items="@result" Hover="true" SortLabel="Sort By" Filter="new Func<GatewayListItem, bool>(FilterFunc)">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<GatewayListItem, object>(x=>x.DeviceId)">ID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.Type)">Type</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.NbDevices)">Nb Device</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                    <MudTh>  </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="DeviceId" Style="word-break: break-all;"><a href="/gateways/details/@context.DeviceId">@context.DeviceId</a></MudTd>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="NbDevices">@context.NbDevices</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd DataLabel="detail"> <MudButton Variant="Variant.Outlined" OnClick="@(() => RedirectToDetail(context.DeviceId))">détail</MudButton></MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                </PagerContent>
            </MudTable>

            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
        }
    </div>
</div>



@code {
    private List<GatewayListItem> result;
    private List<string> listeType = new List<string>() { "lora", "unknow" };
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    private SearchModel model = new SearchModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadGatewaysList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadGatewaysList()
    {
        result = await Http.GetFromJsonAsync<List<GatewayListItem>>("Gateways");
    }

    private bool FilterFunc(GatewayListItem element)
    {
        if (
            (string.IsNullOrWhiteSpace(this.model.DeviceId) || element.DeviceId.Contains(model.DeviceId, StringComparison.OrdinalIgnoreCase))
            && (string.IsNullOrWhiteSpace(this.model.Type) || element.Type.Contains(model.Type, StringComparison.OrdinalIgnoreCase))
            && (string.IsNullOrWhiteSpace(this.model.Status) || element.Status.Contains(model.Status, StringComparison.OrdinalIgnoreCase))
            )
        {
            return true;
        }

        return false;
    }

    private void ResetFiltre()
    {
        this.model = new SearchModel();
    }

    private void RedirectToDetail(string id)
    {
        NavigationManager.NavigateTo($"/gateways/details/{id}");
    }

}
