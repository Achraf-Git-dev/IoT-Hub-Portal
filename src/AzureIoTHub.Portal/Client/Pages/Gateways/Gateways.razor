@page "/gateways"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@*<button type="button" @onclick="@LoadGateway">load gateway</button>*@

<div class="container-fluid">

    <div class="search-panel">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="form" @bind-IsValid="@success">
                    <div class="form-group">
                        <label>Name : </label>
                        <MudTextField T="string" Label="Name" />
                    </div>
                    <div class="form-group">
                        <label>Type : </label>
                        <MudItem xs="10" sm="4" md="4">
                            <MudSelect T="string" Label="Type of the gateway" Variant="Variant.Outlined" OffsetY="true">
                                @foreach (var item in listeType)
                                {
                                    <MudSelectItem Value="@item" />
                                }
                            </MudSelect>
                        </MudItem>
                    </div>
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>

        <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </div>

    <div class="">
        @if (result == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudTable Items="@result" Hover="true" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<GatewayListItem, object>(x=>x.DeviceId)">ID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.Type)">Type</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.NbDevices)">Nb Device</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<GatewayListItem, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                    <MudTh>  </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="DeviceId"><a href="/details/@context.DeviceId" >@context.DeviceId</a></MudTd>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="NbDevices">@context.NbDevices</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd DataLabel="detail"></MudTd>
                </RowTemplate>
            </MudTable>
        }
    </div>
</div>



@code {
    private List<GatewayListItem> result;
    private List<string> listeType = new List<string>() { "Lora" };
    private MudForm form;
    private bool success;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadGatewaysList();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task LoadGatewaysList()
    {
        result = await Http.GetFromJsonAsync<List<GatewayListItem>>("Gateways");
    }
}
