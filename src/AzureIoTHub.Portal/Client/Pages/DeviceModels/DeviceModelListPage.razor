@page "/device-models"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json
@using Blazored.Modal
@using Blazored.Modal.Services

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        @if (result == null)
        {
            <MudItem Class="custom-centered-container">
                <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                    <ColGroup>
                        <col style="width: 30%;" />
                        <col style="width: 30%;" />
                        <col style="width: 30%;" />
                        <col style="width: 5%;" />
                        <col style="width: 5%;" />
                    </ColGroup>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Device Models</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadDeviceModels" Class="ma-2"></MudIconButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh Style="text-align: center">Description</MudTh>
                        <MudTh Style="text-align: center">AppEUI</MudTh>
                        <MudTh Style="text-align: center">Details</MudTh>
                        <MudTh Style="text-align: center">Delete</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                            <a href="/device-models/@context.ModelId">@context.Name</a>
                        </MudTd>
                        <MudTd DataLabel="Description" Style="word-break: break-all; ">
                            @context.Description
                        </MudTd>
                        <MudTd DataLabel="AppEUI" Style="text-align: center;">
                            @context.AppEUI
                        </MudTd>
                        <MudTd DataLabel="Details" Style="text-align: center">
                            <a href="/device-models/@context.ModelId"><MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" /></a>
                        </MudTd>
                        <MudTd DataLabel="Delete" Style="text-align: center">
                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDeviceModel(context))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                    </PagerContent>
                </MudTable>
            </MudItem>
        }

        <MudItem xs="12">
            <a href="/device-models/new"><MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Label="Add a new device model" /></a>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private DeviceModel[] result;
    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadDeviceModels();
    }

    /// <summary>
    ///  Sends a GET request to the DeviceModelsController, to retrieve all device models from the database
    /// </summary>
    /// <returns></returns>
    private async Task LoadDeviceModels()
    {
        try
        {
            result = await Http.GetFromJsonAsync<DeviceModel[]>("api/DeviceModels");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteDeviceModel(DeviceModel deviceModel)
    {
        await Task.Delay(0); //TODO?
    }
}
